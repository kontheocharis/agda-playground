{-# OPTIONS --rewriting --prop #-}

open import Agda.Primitive
open import Agda.Builtin.Bool
open import Agda.Builtin.Nat
open import Agda.Builtin.List
open import Agda.Builtin.Equality
open import Agda.Builtin.Equality.Rewrite
open import Agda.Builtin.Unit
open import Agda.Builtin.String

variable
  ℓ ℓ₁ ℓ₂ ℓ₃ ℓ₄ : Level
  X Y Z       : Set ℓ
  P Q         : X → Set ℓ
  x y z       : X
  f g h       : (x : X) → P x
  b b₁ b₂ b₃  : Bool
  k l m n     : Nat
  s s' s''     : String
  xs ys zs    : List X


-- CWF
data Con : Set

data Ty : Set

data Tm : Con → Ty → Set
data Tm~ : ∀ {Γ A} -> Tm Γ A → Tm Γ A → Prop

data Sub : Con → Con → Set
data Sub~ : ∀ {Γ Δ} → Sub Γ Δ → Sub Γ Δ → Prop

variable
  Γ Δ Θ : Con
  A B C : Ty
  t u v t₀ t₁  : Tm _ _

  σ σ₀ σ₁ σ₂ δ δ₀ δ₁ δ₂ ν ν₁ ν₂ : Sub _ _

infixr 7 _⇒_
infixl 4 _,_
infixr 5 _∘_
infix 5 _[_]

data Con where
  ∙   : Con
  _,_∶_ : Con → String → Ty → Con

data Ty where
  ι : Ty
  _⇒_ : Ty → Ty → Ty

data Sub where
  id : Sub Γ Γ
  ε   : Sub Γ ∙
  _∘_ : Sub Γ Δ → Sub Θ Γ → Sub Θ Δ
  p : Sub (Γ , s ∶ A) Γ
  _,_ : Sub Γ Δ → Tm Γ A → Sub Γ (Δ , s ∶ A)

data Tm where
  _[_] : Tm Δ A → Sub Γ Δ → Tm Γ A
  q : Tm (Γ , s ∶ A) A
  lam  : (s : String) → Tm (Γ , s ∶ A) B → Tm Γ (A ⇒ B)
  app  : Tm Γ (A ⇒ B) → Tm Γ A → Tm Γ B

infixl 5 _!_

_!_ : Tm Γ (A ⇒ B) → Tm Γ A → Tm Γ B
f ! x = app f x

data Tm~ where
  rfl  : Tm~ t t
  sym  : Tm~ t u → Tm~ u t
  trs  : Tm~ t u → Tm~ u v → Tm~ t v

  lam~  : Tm~ t₀ t₁ → Tm~ (lam s t₀) (lam s t₁)
  app~  : Tm~ t₀ t₁ → Tm~ t u → Tm~ (app t₀ t) (app t₁ u)
  _[_]~ : Tm~ t₀ t₁ → Sub~ σ₀ σ₁ → Tm~ (t₀ [ σ₀ ]) (t₁ [ σ₁ ])

  β    : Tm~ (app (lam s t) u) (t [ id , u ])
  -- η    : Tm~ (lam (app (u [ p , q ]) q)) u

  [][] : Tm~ ((t [ σ ]) [ δ ]) (t [ σ ∘ δ ])
  [id] : Tm~ (t [ id ]) t

  q[]   : Tm~ ((q {s = s}) [ σ , t ]) t
  lam[] : Tm~ ((lam s t) [ σ ]) (lam s (t [ σ ∘ p , q ]))
  app[] : Tm~ (app t u [ σ ]) (app (t [ σ ]) (u [ σ ]))

data Sub~ where
  rfl  : Sub~ σ σ
  sym  : Sub~ σ δ → Sub~ δ σ
  trs  : Sub~ σ δ → Sub~ δ ν → Sub~ σ ν

  _∘~_ : Sub~ σ₀ σ₁ → Sub~ δ₀ δ₁ → Sub~ (σ₀ ∘ δ₀) (σ₁ ∘ δ₁)
  _,~_ : (σ₂ : Sub~ σ₀ σ₁) → Tm~ t₀ t₁ → Sub~ (_,_ {s = s} σ₀ t₀) (σ₁ , t₁)

  εη  : Sub~ σ ε
  idl : Sub~ (id ∘ σ) σ
  idr : Sub~ (σ ∘ id) σ
  ass : Sub~ (σ ∘ δ ∘ ν) ((σ ∘ δ) ∘ ν)
  p∘  : Sub~ (p {s = s} ∘ (σ , t)) σ
  pq  : Sub~ (p , q) (id {Γ , s ∶ A})
  ,∘  : Sub~ ((_,_ {s = s} σ t) ∘ δ) (σ ∘ δ , t [ δ ])
  idp  : Sub~ (p ∘ σ , q [ σ ]) σ

{-# BUILTIN REWRITE Tm~ #-}
{-# BUILTIN REWRITE Sub~ #-}

-- Have to de-declare all of these because of an agda bug

β' : Tm~ (app (lam s t) u) (t [ id , u ])
β' = β

app[]' : Tm~ (app t u [ σ ]) (app (t [ σ ]) (u [ σ ]))
app[]' = app[]

lam[]' : Tm~ ((lam s t) [ σ ]) (lam s (t [ σ ∘ p , q ]))
lam[]' = lam[]

[][]' : Tm~ ((t [ σ ]) [ δ ]) (t [ σ ∘ δ ])
[][]' = [][]

q[]' : Tm~ ((q {s = s}) [ σ , t ]) t
q[]' = q[]

[id]' : Tm~ (t [ id ]) t
[id]' = [id]

ass' : Sub~ (σ ∘ δ ∘ ν) ((σ ∘ δ) ∘ ν)
ass' = ass

,∘' :  Sub~ ((_,_ {s = s} σ t) ∘ δ) (σ ∘ δ , t [ δ ])
,∘' = ,∘

idl' : Sub~ (id ∘ σ) σ
idl' = idl

idr' : Sub~ (σ ∘ id) σ
idr' = idr

p∘' : Sub~ (p {s = s} ∘ (σ , t)) σ
p∘' = p∘

pq' : Sub~ (p , q) (id {Γ , s ∶ A})
pq' = pq

idp' : Sub~ (p ∘ σ , q [ σ ]) σ
idp' = idp

-- This rewriting system is confluent -normalising:
-- https://link.springer.com/chapter/10.1007/bfb0097798

{-# REWRITE β' app[]' lam[]' [][]' q[]' [id]' ass' ,∘' idl' idr' p∘' pq' idp' #-}

-- Syntax

infixr 2 _⊢_
infix 2 _⊢_≣_

_⊢_ : (Γ : Con) → Ty → Set
Γ ⊢ T = Tm Γ T

_⊢_≣_ : (Γ : Con) → Tm Γ A → Tm Γ A → Prop
Γ ⊢ t ≣ u = Tm~ t u

-- Variables

data Var : Con → String → Ty → Set where
  instance vz : Var (Γ , s ∶ A) s A
  instance vs : {x : Var Γ s' A} → Var (Γ , s ∶ B) s' A

get : Var Γ s A → Tm Γ A
get vz = q
get (vs {x = x}) = (get x) [ p ]

var : (s : String) → {{v : Var Γ s A}} → Tm Γ A
var _ {{v}} = get v

-- v2 : ∀ {B C} → Tm (Γ , A , B , C) A
-- v2 = v1 [ p ]

-- -- Basic

β-is-definitional : ∙ , ι ⊢ app (lam "x" (?)) t ≣ t
β-is-definitional = rfl

-- β-is-definitional-2 : ∙ , ι ⊢ lam (lam v1) ! v0 ! v0 ≣ v0
-- β-is-definitional-2 = rfl

-- ℕ : Ty
-- ℕ = ι ⇒ (ι ⇒ ι) ⇒ ι

-- `0` : Γ ⊢ ℕ
-- `0` = lam (lam v1)

-- `+1` : Γ ⊢ ℕ ⇒ ℕ
-- `+1` = lam (lam (lam (v0 ! (v2 ! v1 ! v0))))

-- rec-ℕ : Γ ⊢ ι ⇒ (ι ⇒ ι) ⇒ ℕ ⇒ ι
-- rec-ℕ = lam (lam (lam (v0 ! v2 ! v1)))

-- rec-ℕ-0 : ∙ , ι ⊢ rec-ℕ ! v0 ! (lam v0) ! `0` ≣ v0
-- rec-ℕ-0 = {!   !}

